/* ==========================================================================
 Lazyload

 Initialize:
 cargobay.lazyload();

 Support:
 Latest Chrome
 Latest FireFox
 Latest Safari
 IE10 and up
 ========================================================================== */

var cargobay = cargobay || {};

cargobay.lazyLoad = function(window, undefined) {

    var init, _lazyloader, _isElementInViewport, _getAttributes;

    // Config
    var datAttr = 'data-lazy',
        tagToLazyLoad = 'img',
        datEffect = 'data-effect';


    init = function(datAttr, tagToLazyLoad) {

        // add eventlisteners for actions on page
        this.addEventListener('DOMContentLoaded', _lazyloader);
        this.addEventListener('load', _lazyloader);
        this.addEventListener('resize', _lazyloader);
        this.addEventListener('scroll', _lazyloader);
    };

    _lazyloader = function() {

        var data =  _getAttributes(datAttr);

        // set the image src on each element that has the needed data-attribute
        // put the class on the element for adding an effect in loading  (if available)
        [].forEach.call(data, function (item) {

            var effectClass = item.getAttribute(datEffect);
            item.className = effectClass;

            if (_isElementInViewport(item, effectClass)) {

                item.src = item.getAttribute(datAttr);
                console.log(item.getAttribute(datEffect));
                if (item.getAttribute(datEffect) != null) {
                    item.className = effectClass + ' ' + effectClass + '--loaded';
                }

                item.removeAttribute(datAttr);
            }
        });

        // if all the images are loaded, stop calling the handler
        if (data.length == 0) {
            this.removeEventListener('DOMContentLoaded', _lazyloader);
            this.removeEventListener('load', _lazyloader);
            this.removeEventListener('resize', _lazyloader);
            this.removeEventListener('scroll', _lazyloader);
        }
    };

    _isElementInViewport = function(el) {

        var rect = el.getBoundingClientRect();

        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (this.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (this.innerWidth || document.documentElement.clientWidth)
        );
    };

    _getAttributes = function(attribute) {

        var allElements = document.getElementsByTagName(tagToLazyLoad),
            allElementsLen = allElements.length,
            curElement,
            i,
            results = [];

        for(i = 0; i < allElementsLen; i += 1) {
            curElement = allElements[i];

            if(curElement.getAttribute(attribute)) {
                results.push(curElement);
            }
        }

        return results;
    };


    // Init
    init = function() {
        init();
    }();
};
